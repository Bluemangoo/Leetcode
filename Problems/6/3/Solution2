//Time Limit Exceeded: 54 / 112

import java.util.ArrayDeque;
import java.util.Deque;

class Solution {
    public static class A {
        int index, type;

        A(int index, int type) {
            this.index = index;
            this.type = type;
        }
    }

    public boolean validPartition(int[] nums) {
        Deque<A> stack = new ArrayDeque<>();
        int i = 0;
        while (i < nums.length) {
            boolean flag = false;
            if (i < nums.length - 1 && nums[i] == nums[i + 1]) {
                flag = true;
                stack.addLast(new A(i, 1));
                if (i < nums.length - 2 && nums[i] == nums[i + 2]) {
                    stack.addLast(new A(i, 2));
                }
            }
            if (i < nums.length - 2 && nums[i] + 1 == nums[i + 1] && nums[i] + 2 == nums[i + 2]) {
                flag = true;
                stack.addLast(new A(i, 3));
            }
            if (stack.isEmpty()) {
                return false;
            }
            A now = stack.pollLast();
            if (flag) {
                if (now.type == 1) {
                    i += 2;
                } else {
                    i += 3;
                }
            }
            else {
                if (now.type == 1) {
                    i = now.index+2;
                } else {
                    i = now.index+3;
                }
            }
        }
        return true;
    }
}